<?php

namespace $NAMESPACE_TRAIT$;

use Illuminate\Http\Response;
use Illuminate\Pagination\LengthAwarePaginator;

trait ResponseTrait
{
    /**
     * Return a new success JSON response from the application.
     *
     * @param mixed $data
     * @param string $message
     * @param int $code Status code
     * @param bool $sendWithArrayStructure true to makeResponseArray
     * @return \Illuminate\Http\JsonResponse
     */
    public function sendResponse($data, $message = '', $code = Response::HTTP_OK, $sendWithArrayStructure = true)
    {
        if ($sendWithArrayStructure && !($data instanceof LengthAwarePaginator)) {
            $data = $this->makeResponseArray(true, $message, $code, $data);
        }

        return response()->json($data, $code);
    }

    /**
     * Return a new error JSON response from the application.
     *
     * @param string $message
     * @param int $code Error status code
     * @param bool $sendWithArrayStructure true to makeResponseArray
     * @return \Illuminate\Http\JsonResponse
     */
    public function sendError($message = '', $code = Response::HTTP_NOT_FOUND, $sendWithArrayStructure = true)
    {
        $data = $sendWithArrayStructure ? $this->makeResponseArray(false, $message, $code) : $message;
        return response()->json($data, $code);
    }

    /**
     * Make the response array to be used in a JSON response
     *
     * @param bool $success
     * @param array $data
     * @param string $message
     * @param string $code
     *
     * @return array
     */
    public function makeResponseArray($success = true, $message = '', $code = '', $data = [])
    {
        $response = [
            'success' => $success,
            'message' => $message,
        ];

        if (!empty($code)) {
            $response['code'] = $code;
        }

        if (!empty($data)) {
            $dataKey = $success ? 'data' : 'errors';
            $response[$dataKey] = $data;
        }

        return $response;
    }
}
